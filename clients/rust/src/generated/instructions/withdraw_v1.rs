//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct WithdrawV1 {
    /// Market
    pub market: solana_program::pubkey::Pubkey,
    /// User position
    pub user_position: solana_program::pubkey::Pubkey,
    /// Deposit token mint
    pub mint: solana_program::pubkey::Pubkey,
    /// Deposit token account
    pub deposit: solana_program::pubkey::Pubkey,
    /// User token account
    pub token_account: solana_program::pubkey::Pubkey,
    /// User wallet
    pub wallet: solana_program::pubkey::Pubkey,
    /// SPL token program
    pub token_program: solana_program::pubkey::Pubkey,
}

impl WithdrawV1 {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(self.market, false));
        accounts.push(solana_program::instruction::AccountMeta::new(self.user_position, false));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(self.mint, false));
        accounts.push(solana_program::instruction::AccountMeta::new(self.deposit, false));
        accounts.push(solana_program::instruction::AccountMeta::new(self.token_account, false));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(self.wallet, true));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = WithdrawV1InstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::HPL_PARIMUTUEL_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct WithdrawV1InstructionData {
    discriminator: u8,
}

impl WithdrawV1InstructionData {
    pub fn new() -> Self {
        Self { discriminator: 6 }
    }
}

impl Default for WithdrawV1InstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `WithdrawV1`.
///
/// ### Accounts:
///
///   0. `[]` market
///   1. `[writable]` user_position
///   2. `[]` mint
///   3. `[writable]` deposit
///   4. `[writable]` token_account
///   5. `[signer]` wallet
///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct WithdrawV1Builder {
    market: Option<solana_program::pubkey::Pubkey>,
    user_position: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    deposit: Option<solana_program::pubkey::Pubkey>,
    token_account: Option<solana_program::pubkey::Pubkey>,
    wallet: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl WithdrawV1Builder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Market
    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }
    /// User position
    #[inline(always)]
    pub fn user_position(&mut self, user_position: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_position = Some(user_position);
        self
    }
    /// Deposit token mint
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    /// Deposit token account
    #[inline(always)]
    pub fn deposit(&mut self, deposit: solana_program::pubkey::Pubkey) -> &mut Self {
        self.deposit = Some(deposit);
        self
    }
    /// User token account
    #[inline(always)]
    pub fn token_account(&mut self, token_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_account = Some(token_account);
        self
    }
    /// User wallet
    #[inline(always)]
    pub fn wallet(&mut self, wallet: solana_program::pubkey::Pubkey) -> &mut Self {
        self.wallet = Some(wallet);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL token program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = WithdrawV1 {
            market: self.market.expect("market is not set"),
            user_position: self.user_position.expect("user_position is not set"),
            mint: self.mint.expect("mint is not set"),
            deposit: self.deposit.expect("deposit is not set"),
            token_account: self.token_account.expect("token_account is not set"),
            wallet: self.wallet.expect("wallet is not set"),
            token_program: self
                .token_program
                .unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `withdraw_v1` CPI accounts.
pub struct WithdrawV1CpiAccounts<'a, 'b> {
    /// Market
    pub market: &'b solana_program::account_info::AccountInfo<'a>,
    /// User position
    pub user_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// Deposit token mint
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Deposit token account
    pub deposit: &'b solana_program::account_info::AccountInfo<'a>,
    /// User token account
    pub token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// User wallet
    pub wallet: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `withdraw_v1` CPI instruction.
pub struct WithdrawV1Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Market
    pub market: &'b solana_program::account_info::AccountInfo<'a>,
    /// User position
    pub user_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// Deposit token mint
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Deposit token account
    pub deposit: &'b solana_program::account_info::AccountInfo<'a>,
    /// User token account
    pub token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// User wallet
    pub wallet: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> WithdrawV1Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: WithdrawV1CpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            market: accounts.market,
            user_position: accounts.user_position,
            mint: accounts.mint,
            deposit: accounts.deposit,
            token_account: accounts.token_account,
            wallet: accounts.wallet,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts
            .push(solana_program::instruction::AccountMeta::new_readonly(*self.market.key, false));
        accounts
            .push(solana_program::instruction::AccountMeta::new(*self.user_position.key, false));
        accounts
            .push(solana_program::instruction::AccountMeta::new_readonly(*self.mint.key, false));
        accounts.push(solana_program::instruction::AccountMeta::new(*self.deposit.key, false));
        accounts
            .push(solana_program::instruction::AccountMeta::new(*self.token_account.key, false));
        accounts
            .push(solana_program::instruction::AccountMeta::new_readonly(*self.wallet.key, true));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = WithdrawV1InstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::HPL_PARIMUTUEL_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.user_position.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.deposit.clone());
        account_infos.push(self.token_account.clone());
        account_infos.push(self.wallet.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `WithdrawV1` via CPI.
///
/// ### Accounts:
///
///   0. `[]` market
///   1. `[writable]` user_position
///   2. `[]` mint
///   3. `[writable]` deposit
///   4. `[writable]` token_account
///   5. `[signer]` wallet
///   6. `[]` token_program
#[derive(Clone, Debug)]
pub struct WithdrawV1CpiBuilder<'a, 'b> {
    instruction: Box<WithdrawV1CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> WithdrawV1CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(WithdrawV1CpiBuilderInstruction {
            __program: program,
            market: None,
            user_position: None,
            mint: None,
            deposit: None,
            token_account: None,
            wallet: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Market
    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }
    /// User position
    #[inline(always)]
    pub fn user_position(
        &mut self,
        user_position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_position = Some(user_position);
        self
    }
    /// Deposit token mint
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }
    /// Deposit token account
    #[inline(always)]
    pub fn deposit(
        &mut self,
        deposit: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.deposit = Some(deposit);
        self
    }
    /// User token account
    #[inline(always)]
    pub fn token_account(
        &mut self,
        token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_account = Some(token_account);
        self
    }
    /// User wallet
    #[inline(always)]
    pub fn wallet(
        &mut self,
        wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.wallet = Some(wallet);
        self
    }
    /// SPL token program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = WithdrawV1Cpi {
            __program: self.instruction.__program,

            market: self.instruction.market.expect("market is not set"),

            user_position: self.instruction.user_position.expect("user_position is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            deposit: self.instruction.deposit.expect("deposit is not set"),

            token_account: self.instruction.token_account.expect("token_account is not set"),

            wallet: self.instruction.wallet.expect("wallet is not set"),

            token_program: self.instruction.token_program.expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct WithdrawV1CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    deposit: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}
