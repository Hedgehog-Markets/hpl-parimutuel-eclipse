//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum HplParimutuelError {
    /// 0 - Invalid basis points value
    #[error("Invalid basis points value")]
    InvalidBps = 0x0,
    /// 1 - Close timestamp is in the past
    #[error("Close timestamp is in the past")]
    CloseTimestampInPast = 0x1,
    /// 2 - Resolve timestamp is before the close timestamp
    #[error("Resolve timestamp is before the close timestamp")]
    ResolveTimestampBeforeClose = 0x2,
    /// 3 - Market is closed
    #[error("Market is closed")]
    MarketClosed = 0x3,
    /// 4 - Market is invalid
    #[error("Market is invalid")]
    MarketInvalid = 0x4,
    /// 5 - Market is not resolved
    #[error("Market is not resolved")]
    MarketNotResolved = 0x5,
    /// 6 - Market is not invalid
    #[error("Market is not invalid")]
    MarketNotInvalid = 0x6,
    /// 7 - Market already resolved
    #[error("Market already resolved")]
    AlreadyResolved = 0x7,
    /// 8 - Already claimed
    #[error("Already claimed")]
    AlreadyClaimed = 0x8,
    /// 9 - Market resolution timestamp has not been reached
    #[error("Market resolution timestamp has not been reached")]
    ResolveTooEarly = 0x9,
    /// 10 - Invalid option for market
    #[error("Invalid option for market")]
    InvalidOption = 0xA,
    /// 11 - Mint address does not match market mint
    #[error("Mint address does not match market mint")]
    MarketMintMismatch = 0xB,
    /// 12 - Resolver address does not match market resolver
    #[error("Resolver address does not match market resolver")]
    MarketResolverMismatch = 0xC,
    /// 13 - Wallet address does not match user wallet
    #[error("Wallet address does not match user wallet")]
    UserWalletMismatch = 0xD,
    /// 14 - Authority address does not match config authority
    #[error("Authority address does not match config authority")]
    ConfigAuthorityMismatch = 0xE,
    /// 15 - Market inactive timestamp has not been reached
    #[error("Market inactive timestamp has not been reached")]
    InactiveTooEarly = 0xF,
    /// 16 - Failed to deserialize account
    #[error("Failed to deserialize account")]
    DeserializationError = 0x10,
    /// 17 - Failed to serialize account
    #[error("Failed to serialize account")]
    SerializationError = 0x11,
    /// 18 - Combined platform and creator fees exceed 100%
    #[error("Combined platform and creator fees exceed 100%")]
    FeeOverflow = 0x12,
}

impl solana_program::program_error::PrintProgramError for HplParimutuelError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
