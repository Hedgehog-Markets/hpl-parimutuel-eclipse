/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { AccountTypeArgs, State, StateArgs } from "../types";
import type {
  Account,
  Amount,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapAmountSerializer,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  array,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
  u32,
  u64,
  u8,
} from "@metaplex-foundation/umi/serializers";

import { AccountType, getAccountTypeSerializer, getStateSerializer } from "../types";

export type MarketV1 = Account<MarketV1AccountData>;

export type MarketV1AccountData = {
  accountType: AccountType;
  creator: PublicKey;
  index: number;
  resolver: PublicKey;
  mint: PublicKey;
  closeTimestamp: bigint;
  resolveTimestamp: bigint;
  outcomeTimestamp: bigint;
  creatorFee: Amount<"%", 2>;
  platformFee: Amount<"%", 2>;
  state: State;
  outcome: number;
  amounts: Array<bigint>;
  uri: string;
};

export type MarketV1AccountDataArgs = {
  creator: PublicKey;
  index: number;
  resolver: PublicKey;
  mint: PublicKey;
  closeTimestamp: number | bigint;
  resolveTimestamp: number | bigint;
  outcomeTimestamp: number | bigint;
  creatorFee: Amount<"%", 2>;
  platformFee: Amount<"%", 2>;
  state: StateArgs;
  outcome: number;
  amounts: Array<number | bigint>;
  uri: string;
};

export function getMarketV1AccountDataSerializer(): Serializer<
  MarketV1AccountDataArgs,
  MarketV1AccountData
> {
  return mapSerializer<MarketV1AccountDataArgs, any, MarketV1AccountData>(
    struct<MarketV1AccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["creator", publicKeySerializer()],
        ["index", u32()],
        ["resolver", publicKeySerializer()],
        ["mint", publicKeySerializer()],
        ["closeTimestamp", i64()],
        ["resolveTimestamp", i64()],
        ["outcomeTimestamp", i64()],
        ["creatorFee", mapAmountSerializer(u16(), "%", 2)],
        ["platformFee", mapAmountSerializer(u16(), "%", 2)],
        ["state", getStateSerializer()],
        ["outcome", u8()],
        ["amounts", array(u64(), { size: u8() })],
        ["uri", string()],
      ],
      { description: "MarketV1AccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.MarketV1 }),
  );
}

export function deserializeMarketV1(rawAccount: RpcAccount): MarketV1 {
  return deserializeAccount(rawAccount, getMarketV1AccountDataSerializer());
}

export async function fetchMarketV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<MarketV1> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "MarketV1");
  return deserializeMarketV1(maybeAccount);
}

export async function safeFetchMarketV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<MarketV1 | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeMarketV1(maybeAccount) : null;
}

export async function fetchAllMarketV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<MarketV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "MarketV1");
    return deserializeMarketV1(maybeAccount);
  });
}

export async function safeFetchAllMarketV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<MarketV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMarketV1(maybeAccount as RpcAccount));
}

export function getMarketV1GpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "hplParimutuel",
    "PARrVs6F5egaNuz8g6pKJyU4ze3eX5xGZCFb3GLiVvu",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      creator: PublicKey;
      index: number;
      resolver: PublicKey;
      mint: PublicKey;
      closeTimestamp: number | bigint;
      resolveTimestamp: number | bigint;
      outcomeTimestamp: number | bigint;
      creatorFee: Amount<"%", 2>;
      platformFee: Amount<"%", 2>;
      state: StateArgs;
      outcome: number;
      amounts: Array<number | bigint>;
      uri: string;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      creator: [1, publicKeySerializer()],
      index: [33, u32()],
      resolver: [37, publicKeySerializer()],
      mint: [69, publicKeySerializer()],
      closeTimestamp: [101, i64()],
      resolveTimestamp: [109, i64()],
      outcomeTimestamp: [117, i64()],
      creatorFee: [125, mapAmountSerializer(u16(), "%", 2)],
      platformFee: [127, mapAmountSerializer(u16(), "%", 2)],
      state: [129, getStateSerializer()],
      outcome: [130, u8()],
      amounts: [131, array(u64(), { size: u8() })],
      uri: [null, string()],
    })
    .deserializeUsing<MarketV1>((account) => deserializeMarketV1(account))
    .whereField("accountType", AccountType.MarketV1);
}

export function findMarketV1Pda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The address of the user wallet. */
    wallet: PublicKey;
    /** The index of the market in the users markets. */
    index: number;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "hplParimutuel",
    "PARrVs6F5egaNuz8g6pKJyU4ze3eX5xGZCFb3GLiVvu",
  );
  return context.eddsa.findPda(programId, [
    string({ size: "variable" }).serialize("market"),
    publicKeySerializer().serialize(seeds.wallet),
    u32().serialize(seeds.index),
  ]);
}

export async function fetchMarketV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findMarketV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<MarketV1> {
  return fetchMarketV1(context, findMarketV1Pda(context, seeds), options);
}

export async function safeFetchMarketV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findMarketV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<MarketV1 | null> {
  return safeFetchMarketV1(context, findMarketV1Pda(context, seeds), options);
}
