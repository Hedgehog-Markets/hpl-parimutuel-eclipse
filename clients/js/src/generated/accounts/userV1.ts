/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { AccountTypeArgs } from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u32,
} from "@metaplex-foundation/umi/serializers";

import { AccountType, getAccountTypeSerializer } from "../types";

export type UserV1 = Account<UserV1AccountData>;

export type UserV1AccountData = {
  accountType: AccountType;
  wallet: PublicKey;
  nextMarket: number;
};

export type UserV1AccountDataArgs = { wallet: PublicKey; nextMarket: number };

export function getUserV1AccountDataSerializer(): Serializer<
  UserV1AccountDataArgs,
  UserV1AccountData
> {
  return mapSerializer<UserV1AccountDataArgs, any, UserV1AccountData>(
    struct<UserV1AccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["wallet", publicKeySerializer()],
        ["nextMarket", u32()],
      ],
      { description: "UserV1AccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.UserV1 }),
  );
}

export function deserializeUserV1(rawAccount: RpcAccount): UserV1 {
  return deserializeAccount(rawAccount, getUserV1AccountDataSerializer());
}

export async function fetchUserV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<UserV1> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "UserV1");
  return deserializeUserV1(maybeAccount);
}

export async function safeFetchUserV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<UserV1 | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeUserV1(maybeAccount) : null;
}

export async function fetchAllUserV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<UserV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "UserV1");
    return deserializeUserV1(maybeAccount);
  });
}

export async function safeFetchAllUserV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<UserV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeUserV1(maybeAccount as RpcAccount));
}

export function getUserV1GpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "hplParimutuel",
    "PARrVs6F5egaNuz8g6pKJyU4ze3eX5xGZCFb3GLiVvu",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      wallet: PublicKey;
      nextMarket: number;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      wallet: [1, publicKeySerializer()],
      nextMarket: [33, u32()],
    })
    .deserializeUsing<UserV1>((account) => deserializeUserV1(account))
    .whereField("accountType", AccountType.UserV1);
}

export function getUserV1Size(): number {
  return 37;
}

export function findUserV1Pda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The address of the user wallet. */
    wallet: PublicKey;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "hplParimutuel",
    "PARrVs6F5egaNuz8g6pKJyU4ze3eX5xGZCFb3GLiVvu",
  );
  return context.eddsa.findPda(programId, [
    string({ size: "variable" }).serialize("user"),
    publicKeySerializer().serialize(seeds.wallet),
  ]);
}

export async function fetchUserV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findUserV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<UserV1> {
  return fetchUserV1(context, findUserV1Pda(context, seeds), options);
}

export async function safeFetchUserV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findUserV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<UserV1 | null> {
  return safeFetchUserV1(context, findUserV1Pda(context, seeds), options);
}
