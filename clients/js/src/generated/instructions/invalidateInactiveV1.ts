/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { Context, Pda, PublicKey, Signer, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { transactionBuilder } from "@metaplex-foundation/umi";
import { mapSerializer, struct, u8 } from "@metaplex-foundation/umi/serializers";

import { findDepositPda } from "../../hooked";
import { findConfigV1Pda } from "../accounts";
import { expectPublicKey, getAccountMetasAndSigners } from "../shared";

// Accounts.
export type InvalidateInactiveV1InstructionAccounts = {
  /** Config */
  config?: PublicKey | Pda;
  /** Market */
  market: PublicKey | Pda;
  /** Deposit token mint */
  mint: PublicKey | Pda;
  /** Deposit token account */
  deposit?: PublicKey | Pda;
  /** Payer */
  payer?: Signer;
  /** SPL token program */
  tokenProgram?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type InvalidateInactiveV1InstructionData = { discriminator: number };

export type InvalidateInactiveV1InstructionDataArgs = {};

export function getInvalidateInactiveV1InstructionDataSerializer(): Serializer<
  InvalidateInactiveV1InstructionDataArgs,
  InvalidateInactiveV1InstructionData
> {
  return mapSerializer<
    InvalidateInactiveV1InstructionDataArgs,
    any,
    InvalidateInactiveV1InstructionData
  >(
    struct<InvalidateInactiveV1InstructionData>([["discriminator", u8()]], {
      description: "InvalidateInactiveV1InstructionData",
    }),
    (value) => ({ ...value, discriminator: 10 }),
  );
}

// Instruction.
export function invalidateInactiveV1(
  context: Pick<Context, "eddsa" | "payer" | "programs">,
  input: InvalidateInactiveV1InstructionAccounts,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "hplParimutuel",
    "PARrVs6F5egaNuz8g6pKJyU4ze3eX5xGZCFb3GLiVvu",
  );

  // Accounts.
  const resolvedAccounts = {
    config: {
      index: 0,
      isWritable: false as boolean,
      value: input.config ?? null,
    },
    market: {
      index: 1,
      isWritable: true as boolean,
      value: input.market ?? null,
    },
    mint: { index: 2, isWritable: false as boolean, value: input.mint ?? null },
    deposit: {
      index: 3,
      isWritable: true as boolean,
      value: input.deposit ?? null,
    },
    payer: {
      index: 4,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    tokenProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.config.value) {
    resolvedAccounts.config.value = findConfigV1Pda(context);
  }
  if (!resolvedAccounts.deposit.value) {
    resolvedAccounts.deposit.value = findDepositPda(context, {
      market: expectPublicKey(resolvedAccounts.market.value),
    });
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111",
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getInvalidateInactiveV1InstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
