/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type {
  Amount,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { mapAmountSerializer, transactionBuilder } from "@metaplex-foundation/umi";
import {
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
  u8,
} from "@metaplex-foundation/umi/serializers";

import { findCreatorFeesPda, findDepositPda, findPlatformFeesPda } from "../../hooked";
import { findConfigV1Pda, findUserV1Pda } from "../accounts";
import { expectPublicKey, getAccountMetasAndSigners } from "../shared";

// Accounts.
export type CreateMarketV1InstructionAccounts = {
  /** Program config */
  config?: PublicKey | Pda;
  /** Market */
  market: PublicKey | Pda;
  /** User */
  user?: PublicKey | Pda;
  /** Deposit token mint */
  mint: PublicKey | Pda;
  /** Deposit token account */
  deposit?: PublicKey | Pda;
  /** Creator fees account */
  creatorFees?: PublicKey | Pda;
  /** Platform fees account */
  platformFees?: PublicKey | Pda;
  /** User wallet */
  wallet?: Signer;
  /** Payer */
  payer?: Signer;
  /** SPL token program */
  tokenProgram?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateMarketV1InstructionData = {
  discriminator: number;
  resolver: PublicKey;
  closeTimestamp: bigint;
  resolveTimestamp: bigint;
  creatorFee: Amount<"%", 2>;
  options: number;
  uri: string;
};

export type CreateMarketV1InstructionDataArgs = {
  resolver: PublicKey;
  closeTimestamp: number | bigint;
  resolveTimestamp: number | bigint;
  creatorFee: Amount<"%", 2>;
  options: number;
  uri: string;
};

export function getCreateMarketV1InstructionDataSerializer(): Serializer<
  CreateMarketV1InstructionDataArgs,
  CreateMarketV1InstructionData
> {
  return mapSerializer<CreateMarketV1InstructionDataArgs, any, CreateMarketV1InstructionData>(
    struct<CreateMarketV1InstructionData>(
      [
        ["discriminator", u8()],
        ["resolver", publicKeySerializer()],
        ["closeTimestamp", i64()],
        ["resolveTimestamp", i64()],
        ["creatorFee", mapAmountSerializer(u16(), "%", 2)],
        ["options", u8()],
        ["uri", string()],
      ],
      { description: "CreateMarketV1InstructionData" },
    ),
    (value) => ({ ...value, discriminator: 2 }),
  );
}

// Args.
export type CreateMarketV1InstructionArgs = CreateMarketV1InstructionDataArgs;

// Instruction.
export function createMarketV1(
  context: Pick<Context, "eddsa" | "identity" | "payer" | "programs">,
  input: CreateMarketV1InstructionAccounts & CreateMarketV1InstructionArgs,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "hplParimutuel",
    "PARrVs6F5egaNuz8g6pKJyU4ze3eX5xGZCFb3GLiVvu",
  );

  // Accounts.
  const resolvedAccounts = {
    config: {
      index: 0,
      isWritable: false as boolean,
      value: input.config ?? null,
    },
    market: {
      index: 1,
      isWritable: true as boolean,
      value: input.market ?? null,
    },
    user: { index: 2, isWritable: true as boolean, value: input.user ?? null },
    mint: { index: 3, isWritable: false as boolean, value: input.mint ?? null },
    deposit: {
      index: 4,
      isWritable: true as boolean,
      value: input.deposit ?? null,
    },
    creatorFees: {
      index: 5,
      isWritable: true as boolean,
      value: input.creatorFees ?? null,
    },
    platformFees: {
      index: 6,
      isWritable: true as boolean,
      value: input.platformFees ?? null,
    },
    wallet: {
      index: 7,
      isWritable: false as boolean,
      value: input.wallet ?? null,
    },
    payer: {
      index: 8,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    tokenProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateMarketV1InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.config.value) {
    resolvedAccounts.config.value = findConfigV1Pda(context);
  }
  if (!resolvedAccounts.wallet.value) {
    resolvedAccounts.wallet.value = context.identity;
  }
  if (!resolvedAccounts.user.value) {
    resolvedAccounts.user.value = findUserV1Pda(context, {
      wallet: expectPublicKey(resolvedAccounts.wallet.value),
    });
  }
  if (!resolvedAccounts.deposit.value) {
    resolvedAccounts.deposit.value = findDepositPda(context, {
      market: expectPublicKey(resolvedAccounts.market.value),
    });
  }
  if (!resolvedAccounts.creatorFees.value) {
    resolvedAccounts.creatorFees.value = findCreatorFeesPda(context, {
      wallet: expectPublicKey(resolvedAccounts.wallet.value),
      mint: expectPublicKey(resolvedAccounts.mint.value),
    });
  }
  if (!resolvedAccounts.platformFees.value) {
    resolvedAccounts.platformFees.value = findPlatformFeesPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
    });
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111",
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getCreateMarketV1InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
